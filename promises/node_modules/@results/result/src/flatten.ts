import { Result, ValueOf, ErrorOf } from '@jsr/results__types'
import { isOk } from './isOk.js'
import { isResult } from './isResult.js'
import { ok } from './ok.js'
import { unwrap } from './unwrap.js'

export type FlattenedResult<T, E> = Result<
    ValueOf<Result<T, E>>,
    ErrorOf<Result<T, E>>
>

export function flatten<T, E>(result: Result<T, E>): FlattenedResult<T, E> {
    if (isOk(result)) {
        let value = unwrap(result)
        if (isResult(value)) {
            return flatten(value)
        }
        return ok(value) as FlattenedResult<T, E>
    }
    return result as FlattenedResult<T, E>
}
